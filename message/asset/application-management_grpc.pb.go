// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationManagementClient is the client API for ApplicationManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationManagementClient interface {
	//
	//Create an application.
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	//
	//Update an application's basic info.
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	//
	//Get application.
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	//
	//Get application by owner.
	GetApplicationByOwner(ctx context.Context, in *GetApplicationByOwnerRequest, opts ...grpc.CallOption) (*GetApplicationByOwnerResponse, error)
	//
	//Get all applications.
	GetApplications(ctx context.Context, in *GetApplicationsRequest, opts ...grpc.CallOption) (*GetApplicationsResponse, error)
	//
	//Delete an application.
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error)
	//
	//Create a role in app.
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	//
	//Update role's basic info.
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	//
	//Get Role.
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	//
	//Get role by creator.
	GetRoleByCreator(ctx context.Context, in *GetRoleByCreatorRequest, opts ...grpc.CallOption) (*GetRoleByCreatorResponse, error)
	//
	//Get Roles.
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	//
	//Delete role from app.
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	//
	//Set role to user.
	SetUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...grpc.CallOption) (*SetUserRoleResponse, error)
	//
	//Get user role.
	GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*GetUserRoleResponse, error)
	//
	//Get role users.
	GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error)
	//
	//Unset user role.
	UnSetUserRole(ctx context.Context, in *UnSetUserRoleRequest, opts ...grpc.CallOption) (*UnSetUserRoleResponse, error)
	//
	//Add users to app.
	AddUsersToApplication(ctx context.Context, in *AddUsersToApplicationRequest, opts ...grpc.CallOption) (*AddUsersToApplicationResponse, error)
	//
	//Get user from app.
	GetUserFromApplication(ctx context.Context, in *GetUserFromApplicationRequest, opts ...grpc.CallOption) (*GetUserFromApplicationResponse, error)
	//
	//Get users from app.
	GetUsersFromApplication(ctx context.Context, in *GetUsersFromApplicationRequest, opts ...grpc.CallOption) (*GetUsersFromApplicationResponse, error)
	//
	//Remove users from app.
	RemoveUsersFromApplication(ctx context.Context, in *RemoveUsersFromApplicationRequest, opts ...grpc.CallOption) (*RemoveUsersFromApplicationResponse, error)
	//
	//Create group in an application.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	//
	//Get group info.
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	//
	//Get group by owner.
	GetGroupByOwner(ctx context.Context, in *GetGroupByOwnerRequest, opts ...grpc.CallOption) (*GetGroupByOwnerResponse, error)
	//
	//Get all groups.
	GetAllGroups(ctx context.Context, in *GetAllGroupsRequest, opts ...grpc.CallOption) (*GetAllGroupsResponse, error)
	//
	//Update group info.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	//
	//Delete group.
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	//
	//Add users into group.
	AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*AddGroupUsersResponse, error)
	//
	//Get group users.
	GetGroupUsers(ctx context.Context, in *GetGroupUsersRequest, opts ...grpc.CallOption) (*GetGroupUsersResponse, error)
	// get user group info
	GetUserGroup(ctx context.Context, in *GetUserGroupRequest, opts ...grpc.CallOption) (*GetUserGroupResponse, error)
	//
	//Remove users from group.
	RemoveGroupUsers(ctx context.Context, in *RemoveGroupUsersRequest, opts ...grpc.CallOption) (*RemoveGroupUsersResponse, error)
	//
	//Create resource for app.
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	//
	//Update resource of app.
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	//
	//Get resource.
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	//
	//Get resource by creator.
	GetResourceByCreator(ctx context.Context, in *GetResourceByCreatorRequest, opts ...grpc.CallOption) (*GetResourceByCreatorResponse, error)
	//
	//Get all resources from app.
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	//
	//Delete resource from app.
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	// set ga login option
	SetGALogin(ctx context.Context, in *SetGALoginRequest, opts ...grpc.CallOption) (*SetGALoginResponse, error)
	// add user login times
	AddUserLoginTime(ctx context.Context, in *AddUserLoginTimeRequest, opts ...grpc.CallOption) (*AddUserLoginTimeResponse, error)
	// update user google authentication status.
	UpdateUserGAStatus(ctx context.Context, in *UpdateUserGAStatusRequest, opts ...grpc.CallOption) (*UpdateUserGAStatusResponse, error)
	// update user kyc status.
	UpdateUserKYCStatus(ctx context.Context, in *UpdateUserKYCStatusRequest, opts ...grpc.CallOption) (*UpdateUserKYCStatusResponse, error)
	// get application user detail info.
	GetApplicationUserDetail(ctx context.Context, in *GetApplicationUserDetailRequest, opts ...grpc.CallOption) (*GetApplicationUserDetailResponse, error)
}

type applicationManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationManagementClient(cc grpc.ClientConnInterface) ApplicationManagementClient {
	return &applicationManagementClient{cc}
}

func (c *applicationManagementClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/CreateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	out := new(UpdateApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetApplicationByOwner(ctx context.Context, in *GetApplicationByOwnerRequest, opts ...grpc.CallOption) (*GetApplicationByOwnerResponse, error) {
	out := new(GetApplicationByOwnerResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetApplicationByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetApplications(ctx context.Context, in *GetApplicationsRequest, opts ...grpc.CallOption) (*GetApplicationsResponse, error) {
	out := new(GetApplicationsResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error) {
	out := new(DeleteApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/DeleteApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetRoleByCreator(ctx context.Context, in *GetRoleByCreatorRequest, opts ...grpc.CallOption) (*GetRoleByCreatorResponse, error) {
	out := new(GetRoleByCreatorResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetRoleByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) SetUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...grpc.CallOption) (*SetUserRoleResponse, error) {
	out := new(SetUserRoleResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/SetUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*GetUserRoleResponse, error) {
	out := new(GetUserRoleResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error) {
	out := new(GetRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UnSetUserRole(ctx context.Context, in *UnSetUserRoleRequest, opts ...grpc.CallOption) (*UnSetUserRoleResponse, error) {
	out := new(UnSetUserRoleResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UnSetUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) AddUsersToApplication(ctx context.Context, in *AddUsersToApplicationRequest, opts ...grpc.CallOption) (*AddUsersToApplicationResponse, error) {
	out := new(AddUsersToApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/AddUsersToApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetUserFromApplication(ctx context.Context, in *GetUserFromApplicationRequest, opts ...grpc.CallOption) (*GetUserFromApplicationResponse, error) {
	out := new(GetUserFromApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetUserFromApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetUsersFromApplication(ctx context.Context, in *GetUsersFromApplicationRequest, opts ...grpc.CallOption) (*GetUsersFromApplicationResponse, error) {
	out := new(GetUsersFromApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetUsersFromApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) RemoveUsersFromApplication(ctx context.Context, in *RemoveUsersFromApplicationRequest, opts ...grpc.CallOption) (*RemoveUsersFromApplicationResponse, error) {
	out := new(RemoveUsersFromApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/RemoveUsersFromApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetGroupByOwner(ctx context.Context, in *GetGroupByOwnerRequest, opts ...grpc.CallOption) (*GetGroupByOwnerResponse, error) {
	out := new(GetGroupByOwnerResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetGroupByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetAllGroups(ctx context.Context, in *GetAllGroupsRequest, opts ...grpc.CallOption) (*GetAllGroupsResponse, error) {
	out := new(GetAllGroupsResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetAllGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*AddGroupUsersResponse, error) {
	out := new(AddGroupUsersResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/AddGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetGroupUsers(ctx context.Context, in *GetGroupUsersRequest, opts ...grpc.CallOption) (*GetGroupUsersResponse, error) {
	out := new(GetGroupUsersResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetUserGroup(ctx context.Context, in *GetUserGroupRequest, opts ...grpc.CallOption) (*GetUserGroupResponse, error) {
	out := new(GetUserGroupResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) RemoveGroupUsers(ctx context.Context, in *RemoveGroupUsersRequest, opts ...grpc.CallOption) (*RemoveGroupUsersResponse, error) {
	out := new(RemoveGroupUsersResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/RemoveGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetResourceByCreator(ctx context.Context, in *GetResourceByCreatorRequest, opts ...grpc.CallOption) (*GetResourceByCreatorResponse, error) {
	out := new(GetResourceByCreatorResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetResourceByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) SetGALogin(ctx context.Context, in *SetGALoginRequest, opts ...grpc.CallOption) (*SetGALoginResponse, error) {
	out := new(SetGALoginResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/SetGALogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) AddUserLoginTime(ctx context.Context, in *AddUserLoginTimeRequest, opts ...grpc.CallOption) (*AddUserLoginTimeResponse, error) {
	out := new(AddUserLoginTimeResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/AddUserLoginTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateUserGAStatus(ctx context.Context, in *UpdateUserGAStatusRequest, opts ...grpc.CallOption) (*UpdateUserGAStatusResponse, error) {
	out := new(UpdateUserGAStatusResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateUserGAStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateUserKYCStatus(ctx context.Context, in *UpdateUserKYCStatusRequest, opts ...grpc.CallOption) (*UpdateUserKYCStatusResponse, error) {
	out := new(UpdateUserKYCStatusResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateUserKYCStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetApplicationUserDetail(ctx context.Context, in *GetApplicationUserDetailRequest, opts ...grpc.CallOption) (*GetApplicationUserDetailResponse, error) {
	out := new(GetApplicationUserDetailResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetApplicationUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationManagementServer is the server API for ApplicationManagement service.
// All implementations must embed UnimplementedApplicationManagementServer
// for forward compatibility
type ApplicationManagementServer interface {
	//
	//Create an application.
	CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	//
	//Update an application's basic info.
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error)
	//
	//Get application.
	GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	//
	//Get application by owner.
	GetApplicationByOwner(context.Context, *GetApplicationByOwnerRequest) (*GetApplicationByOwnerResponse, error)
	//
	//Get all applications.
	GetApplications(context.Context, *GetApplicationsRequest) (*GetApplicationsResponse, error)
	//
	//Delete an application.
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error)
	//
	//Create a role in app.
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	//
	//Update role's basic info.
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	//
	//Get Role.
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	//
	//Get role by creator.
	GetRoleByCreator(context.Context, *GetRoleByCreatorRequest) (*GetRoleByCreatorResponse, error)
	//
	//Get Roles.
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	//
	//Delete role from app.
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	//
	//Set role to user.
	SetUserRole(context.Context, *SetUserRoleRequest) (*SetUserRoleResponse, error)
	//
	//Get user role.
	GetUserRole(context.Context, *GetUserRoleRequest) (*GetUserRoleResponse, error)
	//
	//Get role users.
	GetRoleUsers(context.Context, *GetRoleUsersRequest) (*GetRoleUsersResponse, error)
	//
	//Unset user role.
	UnSetUserRole(context.Context, *UnSetUserRoleRequest) (*UnSetUserRoleResponse, error)
	//
	//Add users to app.
	AddUsersToApplication(context.Context, *AddUsersToApplicationRequest) (*AddUsersToApplicationResponse, error)
	//
	//Get user from app.
	GetUserFromApplication(context.Context, *GetUserFromApplicationRequest) (*GetUserFromApplicationResponse, error)
	//
	//Get users from app.
	GetUsersFromApplication(context.Context, *GetUsersFromApplicationRequest) (*GetUsersFromApplicationResponse, error)
	//
	//Remove users from app.
	RemoveUsersFromApplication(context.Context, *RemoveUsersFromApplicationRequest) (*RemoveUsersFromApplicationResponse, error)
	//
	//Create group in an application.
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	//
	//Get group info.
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	//
	//Get group by owner.
	GetGroupByOwner(context.Context, *GetGroupByOwnerRequest) (*GetGroupByOwnerResponse, error)
	//
	//Get all groups.
	GetAllGroups(context.Context, *GetAllGroupsRequest) (*GetAllGroupsResponse, error)
	//
	//Update group info.
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	//
	//Delete group.
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	//
	//Add users into group.
	AddGroupUsers(context.Context, *AddGroupUsersRequest) (*AddGroupUsersResponse, error)
	//
	//Get group users.
	GetGroupUsers(context.Context, *GetGroupUsersRequest) (*GetGroupUsersResponse, error)
	// get user group info
	GetUserGroup(context.Context, *GetUserGroupRequest) (*GetUserGroupResponse, error)
	//
	//Remove users from group.
	RemoveGroupUsers(context.Context, *RemoveGroupUsersRequest) (*RemoveGroupUsersResponse, error)
	//
	//Create resource for app.
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	//
	//Update resource of app.
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	//
	//Get resource.
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	//
	//Get resource by creator.
	GetResourceByCreator(context.Context, *GetResourceByCreatorRequest) (*GetResourceByCreatorResponse, error)
	//
	//Get all resources from app.
	GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error)
	//
	//Delete resource from app.
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	// set ga login option
	SetGALogin(context.Context, *SetGALoginRequest) (*SetGALoginResponse, error)
	// add user login times
	AddUserLoginTime(context.Context, *AddUserLoginTimeRequest) (*AddUserLoginTimeResponse, error)
	// update user google authentication status.
	UpdateUserGAStatus(context.Context, *UpdateUserGAStatusRequest) (*UpdateUserGAStatusResponse, error)
	// update user kyc status.
	UpdateUserKYCStatus(context.Context, *UpdateUserKYCStatusRequest) (*UpdateUserKYCStatusResponse, error)
	// get application user detail info.
	GetApplicationUserDetail(context.Context, *GetApplicationUserDetailRequest) (*GetApplicationUserDetailResponse, error)
	mustEmbedUnimplementedApplicationManagementServer()
}

// UnimplementedApplicationManagementServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationManagementServer struct {
}

func (UnimplementedApplicationManagementServer) CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedApplicationManagementServer) GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedApplicationManagementServer) GetApplicationByOwner(context.Context, *GetApplicationByOwnerRequest) (*GetApplicationByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationByOwner not implemented")
}
func (UnimplementedApplicationManagementServer) GetApplications(context.Context, *GetApplicationsRequest) (*GetApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplications not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedApplicationManagementServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedApplicationManagementServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedApplicationManagementServer) GetRoleByCreator(context.Context, *GetRoleByCreatorRequest) (*GetRoleByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByCreator not implemented")
}
func (UnimplementedApplicationManagementServer) GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedApplicationManagementServer) SetUserRole(context.Context, *SetUserRoleRequest) (*SetUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserRole not implemented")
}
func (UnimplementedApplicationManagementServer) GetUserRole(context.Context, *GetUserRoleRequest) (*GetUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRole not implemented")
}
func (UnimplementedApplicationManagementServer) GetRoleUsers(context.Context, *GetRoleUsersRequest) (*GetRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUsers not implemented")
}
func (UnimplementedApplicationManagementServer) UnSetUserRole(context.Context, *UnSetUserRoleRequest) (*UnSetUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSetUserRole not implemented")
}
func (UnimplementedApplicationManagementServer) AddUsersToApplication(context.Context, *AddUsersToApplicationRequest) (*AddUsersToApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToApplication not implemented")
}
func (UnimplementedApplicationManagementServer) GetUserFromApplication(context.Context, *GetUserFromApplicationRequest) (*GetUserFromApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFromApplication not implemented")
}
func (UnimplementedApplicationManagementServer) GetUsersFromApplication(context.Context, *GetUsersFromApplicationRequest) (*GetUsersFromApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersFromApplication not implemented")
}
func (UnimplementedApplicationManagementServer) RemoveUsersFromApplication(context.Context, *RemoveUsersFromApplicationRequest) (*RemoveUsersFromApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsersFromApplication not implemented")
}
func (UnimplementedApplicationManagementServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedApplicationManagementServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedApplicationManagementServer) GetGroupByOwner(context.Context, *GetGroupByOwnerRequest) (*GetGroupByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByOwner not implemented")
}
func (UnimplementedApplicationManagementServer) GetAllGroups(context.Context, *GetAllGroupsRequest) (*GetAllGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroups not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedApplicationManagementServer) AddGroupUsers(context.Context, *AddGroupUsersRequest) (*AddGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupUsers not implemented")
}
func (UnimplementedApplicationManagementServer) GetGroupUsers(context.Context, *GetGroupUsersRequest) (*GetGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupUsers not implemented")
}
func (UnimplementedApplicationManagementServer) GetUserGroup(context.Context, *GetUserGroupRequest) (*GetUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroup not implemented")
}
func (UnimplementedApplicationManagementServer) RemoveGroupUsers(context.Context, *RemoveGroupUsersRequest) (*RemoveGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupUsers not implemented")
}
func (UnimplementedApplicationManagementServer) CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedApplicationManagementServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedApplicationManagementServer) GetResourceByCreator(context.Context, *GetResourceByCreatorRequest) (*GetResourceByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByCreator not implemented")
}
func (UnimplementedApplicationManagementServer) GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedApplicationManagementServer) SetGALogin(context.Context, *SetGALoginRequest) (*SetGALoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGALogin not implemented")
}
func (UnimplementedApplicationManagementServer) AddUserLoginTime(context.Context, *AddUserLoginTimeRequest) (*AddUserLoginTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserLoginTime not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateUserGAStatus(context.Context, *UpdateUserGAStatusRequest) (*UpdateUserGAStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGAStatus not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateUserKYCStatus(context.Context, *UpdateUserKYCStatusRequest) (*UpdateUserKYCStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserKYCStatus not implemented")
}
func (UnimplementedApplicationManagementServer) GetApplicationUserDetail(context.Context, *GetApplicationUserDetailRequest) (*GetApplicationUserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationUserDetail not implemented")
}
func (UnimplementedApplicationManagementServer) mustEmbedUnimplementedApplicationManagementServer() {}

// UnsafeApplicationManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationManagementServer will
// result in compilation errors.
type UnsafeApplicationManagementServer interface {
	mustEmbedUnimplementedApplicationManagementServer()
}

func RegisterApplicationManagementServer(s grpc.ServiceRegistrar, srv ApplicationManagementServer) {
	s.RegisterService(&ApplicationManagement_ServiceDesc, srv)
}

func _ApplicationManagement_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetApplicationByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetApplicationByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetApplicationByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetApplicationByOwner(ctx, req.(*GetApplicationByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetApplications(ctx, req.(*GetApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetRoleByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetRoleByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetRoleByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetRoleByCreator(ctx, req.(*GetRoleByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_SetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).SetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/SetUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).SetUserRole(ctx, req.(*SetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetUserRole(ctx, req.(*GetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetRoleUsers(ctx, req.(*GetRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UnSetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UnSetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UnSetUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UnSetUserRole(ctx, req.(*UnSetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_AddUsersToApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersToApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).AddUsersToApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/AddUsersToApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).AddUsersToApplication(ctx, req.(*AddUsersToApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetUserFromApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFromApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetUserFromApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetUserFromApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetUserFromApplication(ctx, req.(*GetUserFromApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetUsersFromApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersFromApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetUsersFromApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetUsersFromApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetUsersFromApplication(ctx, req.(*GetUsersFromApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_RemoveUsersFromApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUsersFromApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).RemoveUsersFromApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/RemoveUsersFromApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).RemoveUsersFromApplication(ctx, req.(*RemoveUsersFromApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetGroupByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetGroupByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetGroupByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetGroupByOwner(ctx, req.(*GetGroupByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetAllGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetAllGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetAllGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetAllGroups(ctx, req.(*GetAllGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_AddGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).AddGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/AddGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).AddGroupUsers(ctx, req.(*AddGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetGroupUsers(ctx, req.(*GetGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetUserGroup(ctx, req.(*GetUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_RemoveGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).RemoveGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/RemoveGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).RemoveGroupUsers(ctx, req.(*RemoveGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetResourceByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetResourceByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetResourceByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetResourceByCreator(ctx, req.(*GetResourceByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetResources(ctx, req.(*GetResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_SetGALogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGALoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).SetGALogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/SetGALogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).SetGALogin(ctx, req.(*SetGALoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_AddUserLoginTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserLoginTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).AddUserLoginTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/AddUserLoginTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).AddUserLoginTime(ctx, req.(*AddUserLoginTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateUserGAStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGAStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateUserGAStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateUserGAStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateUserGAStatus(ctx, req.(*UpdateUserGAStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateUserKYCStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserKYCStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateUserKYCStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateUserKYCStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateUserKYCStatus(ctx, req.(*UpdateUserKYCStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetApplicationUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationUserDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetApplicationUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetApplicationUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetApplicationUserDetail(ctx, req.(*GetApplicationUserDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationManagement_ServiceDesc is the grpc.ServiceDesc for ApplicationManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.management.v1.ApplicationManagement",
	HandlerType: (*ApplicationManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _ApplicationManagement_CreateApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _ApplicationManagement_UpdateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _ApplicationManagement_GetApplication_Handler,
		},
		{
			MethodName: "GetApplicationByOwner",
			Handler:    _ApplicationManagement_GetApplicationByOwner_Handler,
		},
		{
			MethodName: "GetApplications",
			Handler:    _ApplicationManagement_GetApplications_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ApplicationManagement_DeleteApplication_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _ApplicationManagement_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _ApplicationManagement_UpdateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _ApplicationManagement_GetRole_Handler,
		},
		{
			MethodName: "GetRoleByCreator",
			Handler:    _ApplicationManagement_GetRoleByCreator_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _ApplicationManagement_GetRoles_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _ApplicationManagement_DeleteRole_Handler,
		},
		{
			MethodName: "SetUserRole",
			Handler:    _ApplicationManagement_SetUserRole_Handler,
		},
		{
			MethodName: "GetUserRole",
			Handler:    _ApplicationManagement_GetUserRole_Handler,
		},
		{
			MethodName: "GetRoleUsers",
			Handler:    _ApplicationManagement_GetRoleUsers_Handler,
		},
		{
			MethodName: "UnSetUserRole",
			Handler:    _ApplicationManagement_UnSetUserRole_Handler,
		},
		{
			MethodName: "AddUsersToApplication",
			Handler:    _ApplicationManagement_AddUsersToApplication_Handler,
		},
		{
			MethodName: "GetUserFromApplication",
			Handler:    _ApplicationManagement_GetUserFromApplication_Handler,
		},
		{
			MethodName: "GetUsersFromApplication",
			Handler:    _ApplicationManagement_GetUsersFromApplication_Handler,
		},
		{
			MethodName: "RemoveUsersFromApplication",
			Handler:    _ApplicationManagement_RemoveUsersFromApplication_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ApplicationManagement_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _ApplicationManagement_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupByOwner",
			Handler:    _ApplicationManagement_GetGroupByOwner_Handler,
		},
		{
			MethodName: "GetAllGroups",
			Handler:    _ApplicationManagement_GetAllGroups_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ApplicationManagement_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ApplicationManagement_DeleteGroup_Handler,
		},
		{
			MethodName: "AddGroupUsers",
			Handler:    _ApplicationManagement_AddGroupUsers_Handler,
		},
		{
			MethodName: "GetGroupUsers",
			Handler:    _ApplicationManagement_GetGroupUsers_Handler,
		},
		{
			MethodName: "GetUserGroup",
			Handler:    _ApplicationManagement_GetUserGroup_Handler,
		},
		{
			MethodName: "RemoveGroupUsers",
			Handler:    _ApplicationManagement_RemoveGroupUsers_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _ApplicationManagement_CreateResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ApplicationManagement_UpdateResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ApplicationManagement_GetResource_Handler,
		},
		{
			MethodName: "GetResourceByCreator",
			Handler:    _ApplicationManagement_GetResourceByCreator_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _ApplicationManagement_GetResources_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _ApplicationManagement_DeleteResource_Handler,
		},
		{
			MethodName: "SetGALogin",
			Handler:    _ApplicationManagement_SetGALogin_Handler,
		},
		{
			MethodName: "AddUserLoginTime",
			Handler:    _ApplicationManagement_AddUserLoginTime_Handler,
		},
		{
			MethodName: "UpdateUserGAStatus",
			Handler:    _ApplicationManagement_UpdateUserGAStatus_Handler,
		},
		{
			MethodName: "UpdateUserKYCStatus",
			Handler:    _ApplicationManagement_UpdateUserKYCStatus_Handler,
		},
		{
			MethodName: "GetApplicationUserDetail",
			Handler:    _ApplicationManagement_GetApplicationUserDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/application-management.proto",
}
