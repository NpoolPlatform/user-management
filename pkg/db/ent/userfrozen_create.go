// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/userfrozen"
	"github.com/google/uuid"
)

// UserFrozenCreate is the builder for creating a UserFrozen entity.
type UserFrozenCreate struct {
	config
	mutation *UserFrozenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (ufc *UserFrozenCreate) SetUserID(u uuid.UUID) *UserFrozenCreate {
	ufc.mutation.SetUserID(u)
	return ufc
}

// SetFrozenBy sets the "frozen_by" field.
func (ufc *UserFrozenCreate) SetFrozenBy(u uuid.UUID) *UserFrozenCreate {
	ufc.mutation.SetFrozenBy(u)
	return ufc
}

// SetFrozenCause sets the "frozen_cause" field.
func (ufc *UserFrozenCreate) SetFrozenCause(s string) *UserFrozenCreate {
	ufc.mutation.SetFrozenCause(s)
	return ufc
}

// SetCreateAt sets the "create_at" field.
func (ufc *UserFrozenCreate) SetCreateAt(u uint32) *UserFrozenCreate {
	ufc.mutation.SetCreateAt(u)
	return ufc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufc *UserFrozenCreate) SetNillableCreateAt(u *uint32) *UserFrozenCreate {
	if u != nil {
		ufc.SetCreateAt(*u)
	}
	return ufc
}

// SetEndAt sets the "end_at" field.
func (ufc *UserFrozenCreate) SetEndAt(u uint32) *UserFrozenCreate {
	ufc.mutation.SetEndAt(u)
	return ufc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ufc *UserFrozenCreate) SetNillableEndAt(u *uint32) *UserFrozenCreate {
	if u != nil {
		ufc.SetEndAt(*u)
	}
	return ufc
}

// SetStatus sets the "status" field.
func (ufc *UserFrozenCreate) SetStatus(s string) *UserFrozenCreate {
	ufc.mutation.SetStatus(s)
	return ufc
}

// SetUnfrozenBy sets the "unfrozen_by" field.
func (ufc *UserFrozenCreate) SetUnfrozenBy(u uuid.UUID) *UserFrozenCreate {
	ufc.mutation.SetUnfrozenBy(u)
	return ufc
}

// SetID sets the "id" field.
func (ufc *UserFrozenCreate) SetID(u uuid.UUID) *UserFrozenCreate {
	ufc.mutation.SetID(u)
	return ufc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ufc *UserFrozenCreate) SetNillableID(u *uuid.UUID) *UserFrozenCreate {
	if u != nil {
		ufc.SetID(*u)
	}
	return ufc
}

// Mutation returns the UserFrozenMutation object of the builder.
func (ufc *UserFrozenCreate) Mutation() *UserFrozenMutation {
	return ufc.mutation
}

// Save creates the UserFrozen in the database.
func (ufc *UserFrozenCreate) Save(ctx context.Context) (*UserFrozen, error) {
	var (
		err  error
		node *UserFrozen
	)
	ufc.defaults()
	if len(ufc.hooks) == 0 {
		if err = ufc.check(); err != nil {
			return nil, err
		}
		node, err = ufc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserFrozenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ufc.check(); err != nil {
				return nil, err
			}
			ufc.mutation = mutation
			if node, err = ufc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ufc.hooks) - 1; i >= 0; i-- {
			if ufc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ufc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ufc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ufc *UserFrozenCreate) SaveX(ctx context.Context) *UserFrozen {
	v, err := ufc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufc *UserFrozenCreate) Exec(ctx context.Context) error {
	_, err := ufc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufc *UserFrozenCreate) ExecX(ctx context.Context) {
	if err := ufc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufc *UserFrozenCreate) defaults() {
	if _, ok := ufc.mutation.CreateAt(); !ok {
		v := userfrozen.DefaultCreateAt()
		ufc.mutation.SetCreateAt(v)
	}
	if _, ok := ufc.mutation.EndAt(); !ok {
		v := userfrozen.DefaultEndAt
		ufc.mutation.SetEndAt(v)
	}
	if _, ok := ufc.mutation.ID(); !ok {
		v := userfrozen.DefaultID()
		ufc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufc *UserFrozenCreate) check() error {
	if _, ok := ufc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserFrozen.user_id"`)}
	}
	if _, ok := ufc.mutation.FrozenBy(); !ok {
		return &ValidationError{Name: "frozen_by", err: errors.New(`ent: missing required field "UserFrozen.frozen_by"`)}
	}
	if _, ok := ufc.mutation.FrozenCause(); !ok {
		return &ValidationError{Name: "frozen_cause", err: errors.New(`ent: missing required field "UserFrozen.frozen_cause"`)}
	}
	if _, ok := ufc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "UserFrozen.create_at"`)}
	}
	if _, ok := ufc.mutation.EndAt(); !ok {
		return &ValidationError{Name: "end_at", err: errors.New(`ent: missing required field "UserFrozen.end_at"`)}
	}
	if _, ok := ufc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "UserFrozen.status"`)}
	}
	if _, ok := ufc.mutation.UnfrozenBy(); !ok {
		return &ValidationError{Name: "unfrozen_by", err: errors.New(`ent: missing required field "UserFrozen.unfrozen_by"`)}
	}
	return nil
}

func (ufc *UserFrozenCreate) sqlSave(ctx context.Context) (*UserFrozen, error) {
	_node, _spec := ufc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ufc *UserFrozenCreate) createSpec() (*UserFrozen, *sqlgraph.CreateSpec) {
	var (
		_node = &UserFrozen{config: ufc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userfrozen.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userfrozen.FieldID,
			},
		}
	)
	_spec.OnConflict = ufc.conflict
	if id, ok := ufc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ufc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userfrozen.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := ufc.mutation.FrozenBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userfrozen.FieldFrozenBy,
		})
		_node.FrozenBy = value
	}
	if value, ok := ufc.mutation.FrozenCause(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userfrozen.FieldFrozenCause,
		})
		_node.FrozenCause = value
	}
	if value, ok := ufc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := ufc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := ufc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userfrozen.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ufc.mutation.UnfrozenBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userfrozen.FieldUnfrozenBy,
		})
		_node.UnfrozenBy = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserFrozen.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserFrozenUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
//
func (ufc *UserFrozenCreate) OnConflict(opts ...sql.ConflictOption) *UserFrozenUpsertOne {
	ufc.conflict = opts
	return &UserFrozenUpsertOne{
		create: ufc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserFrozen.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ufc *UserFrozenCreate) OnConflictColumns(columns ...string) *UserFrozenUpsertOne {
	ufc.conflict = append(ufc.conflict, sql.ConflictColumns(columns...))
	return &UserFrozenUpsertOne{
		create: ufc,
	}
}

type (
	// UserFrozenUpsertOne is the builder for "upsert"-ing
	//  one UserFrozen node.
	UserFrozenUpsertOne struct {
		create *UserFrozenCreate
	}

	// UserFrozenUpsert is the "OnConflict" setter.
	UserFrozenUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *UserFrozenUpsert) SetUserID(v uuid.UUID) *UserFrozenUpsert {
	u.Set(userfrozen.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserFrozenUpsert) UpdateUserID() *UserFrozenUpsert {
	u.SetExcluded(userfrozen.FieldUserID)
	return u
}

// SetFrozenBy sets the "frozen_by" field.
func (u *UserFrozenUpsert) SetFrozenBy(v uuid.UUID) *UserFrozenUpsert {
	u.Set(userfrozen.FieldFrozenBy, v)
	return u
}

// UpdateFrozenBy sets the "frozen_by" field to the value that was provided on create.
func (u *UserFrozenUpsert) UpdateFrozenBy() *UserFrozenUpsert {
	u.SetExcluded(userfrozen.FieldFrozenBy)
	return u
}

// SetFrozenCause sets the "frozen_cause" field.
func (u *UserFrozenUpsert) SetFrozenCause(v string) *UserFrozenUpsert {
	u.Set(userfrozen.FieldFrozenCause, v)
	return u
}

// UpdateFrozenCause sets the "frozen_cause" field to the value that was provided on create.
func (u *UserFrozenUpsert) UpdateFrozenCause() *UserFrozenUpsert {
	u.SetExcluded(userfrozen.FieldFrozenCause)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *UserFrozenUpsert) SetCreateAt(v uint32) *UserFrozenUpsert {
	u.Set(userfrozen.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserFrozenUpsert) UpdateCreateAt() *UserFrozenUpsert {
	u.SetExcluded(userfrozen.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *UserFrozenUpsert) AddCreateAt(v uint32) *UserFrozenUpsert {
	u.Add(userfrozen.FieldCreateAt, v)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *UserFrozenUpsert) SetEndAt(v uint32) *UserFrozenUpsert {
	u.Set(userfrozen.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *UserFrozenUpsert) UpdateEndAt() *UserFrozenUpsert {
	u.SetExcluded(userfrozen.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *UserFrozenUpsert) AddEndAt(v uint32) *UserFrozenUpsert {
	u.Add(userfrozen.FieldEndAt, v)
	return u
}

// SetStatus sets the "status" field.
func (u *UserFrozenUpsert) SetStatus(v string) *UserFrozenUpsert {
	u.Set(userfrozen.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserFrozenUpsert) UpdateStatus() *UserFrozenUpsert {
	u.SetExcluded(userfrozen.FieldStatus)
	return u
}

// SetUnfrozenBy sets the "unfrozen_by" field.
func (u *UserFrozenUpsert) SetUnfrozenBy(v uuid.UUID) *UserFrozenUpsert {
	u.Set(userfrozen.FieldUnfrozenBy, v)
	return u
}

// UpdateUnfrozenBy sets the "unfrozen_by" field to the value that was provided on create.
func (u *UserFrozenUpsert) UpdateUnfrozenBy() *UserFrozenUpsert {
	u.SetExcluded(userfrozen.FieldUnfrozenBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserFrozen.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userfrozen.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserFrozenUpsertOne) UpdateNewValues() *UserFrozenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userfrozen.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.UserFrozen.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserFrozenUpsertOne) Ignore() *UserFrozenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserFrozenUpsertOne) DoNothing() *UserFrozenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserFrozenCreate.OnConflict
// documentation for more info.
func (u *UserFrozenUpsertOne) Update(set func(*UserFrozenUpsert)) *UserFrozenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserFrozenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserFrozenUpsertOne) SetUserID(v uuid.UUID) *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserFrozenUpsertOne) UpdateUserID() *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateUserID()
	})
}

// SetFrozenBy sets the "frozen_by" field.
func (u *UserFrozenUpsertOne) SetFrozenBy(v uuid.UUID) *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetFrozenBy(v)
	})
}

// UpdateFrozenBy sets the "frozen_by" field to the value that was provided on create.
func (u *UserFrozenUpsertOne) UpdateFrozenBy() *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateFrozenBy()
	})
}

// SetFrozenCause sets the "frozen_cause" field.
func (u *UserFrozenUpsertOne) SetFrozenCause(v string) *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetFrozenCause(v)
	})
}

// UpdateFrozenCause sets the "frozen_cause" field to the value that was provided on create.
func (u *UserFrozenUpsertOne) UpdateFrozenCause() *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateFrozenCause()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *UserFrozenUpsertOne) SetCreateAt(v uint32) *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *UserFrozenUpsertOne) AddCreateAt(v uint32) *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserFrozenUpsertOne) UpdateCreateAt() *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateCreateAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *UserFrozenUpsertOne) SetEndAt(v uint32) *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *UserFrozenUpsertOne) AddEndAt(v uint32) *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *UserFrozenUpsertOne) UpdateEndAt() *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateEndAt()
	})
}

// SetStatus sets the "status" field.
func (u *UserFrozenUpsertOne) SetStatus(v string) *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserFrozenUpsertOne) UpdateStatus() *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateStatus()
	})
}

// SetUnfrozenBy sets the "unfrozen_by" field.
func (u *UserFrozenUpsertOne) SetUnfrozenBy(v uuid.UUID) *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetUnfrozenBy(v)
	})
}

// UpdateUnfrozenBy sets the "unfrozen_by" field to the value that was provided on create.
func (u *UserFrozenUpsertOne) UpdateUnfrozenBy() *UserFrozenUpsertOne {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateUnfrozenBy()
	})
}

// Exec executes the query.
func (u *UserFrozenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserFrozenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserFrozenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserFrozenUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserFrozenUpsertOne.ID is not supported by MySQL driver. Use UserFrozenUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserFrozenUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserFrozenCreateBulk is the builder for creating many UserFrozen entities in bulk.
type UserFrozenCreateBulk struct {
	config
	builders []*UserFrozenCreate
	conflict []sql.ConflictOption
}

// Save creates the UserFrozen entities in the database.
func (ufcb *UserFrozenCreateBulk) Save(ctx context.Context) ([]*UserFrozen, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ufcb.builders))
	nodes := make([]*UserFrozen, len(ufcb.builders))
	mutators := make([]Mutator, len(ufcb.builders))
	for i := range ufcb.builders {
		func(i int, root context.Context) {
			builder := ufcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserFrozenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ufcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufcb *UserFrozenCreateBulk) SaveX(ctx context.Context) []*UserFrozen {
	v, err := ufcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufcb *UserFrozenCreateBulk) Exec(ctx context.Context) error {
	_, err := ufcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufcb *UserFrozenCreateBulk) ExecX(ctx context.Context) {
	if err := ufcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserFrozen.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserFrozenUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
//
func (ufcb *UserFrozenCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserFrozenUpsertBulk {
	ufcb.conflict = opts
	return &UserFrozenUpsertBulk{
		create: ufcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserFrozen.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ufcb *UserFrozenCreateBulk) OnConflictColumns(columns ...string) *UserFrozenUpsertBulk {
	ufcb.conflict = append(ufcb.conflict, sql.ConflictColumns(columns...))
	return &UserFrozenUpsertBulk{
		create: ufcb,
	}
}

// UserFrozenUpsertBulk is the builder for "upsert"-ing
// a bulk of UserFrozen nodes.
type UserFrozenUpsertBulk struct {
	create *UserFrozenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserFrozen.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userfrozen.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserFrozenUpsertBulk) UpdateNewValues() *UserFrozenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userfrozen.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserFrozen.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserFrozenUpsertBulk) Ignore() *UserFrozenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserFrozenUpsertBulk) DoNothing() *UserFrozenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserFrozenCreateBulk.OnConflict
// documentation for more info.
func (u *UserFrozenUpsertBulk) Update(set func(*UserFrozenUpsert)) *UserFrozenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserFrozenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserFrozenUpsertBulk) SetUserID(v uuid.UUID) *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserFrozenUpsertBulk) UpdateUserID() *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateUserID()
	})
}

// SetFrozenBy sets the "frozen_by" field.
func (u *UserFrozenUpsertBulk) SetFrozenBy(v uuid.UUID) *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetFrozenBy(v)
	})
}

// UpdateFrozenBy sets the "frozen_by" field to the value that was provided on create.
func (u *UserFrozenUpsertBulk) UpdateFrozenBy() *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateFrozenBy()
	})
}

// SetFrozenCause sets the "frozen_cause" field.
func (u *UserFrozenUpsertBulk) SetFrozenCause(v string) *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetFrozenCause(v)
	})
}

// UpdateFrozenCause sets the "frozen_cause" field to the value that was provided on create.
func (u *UserFrozenUpsertBulk) UpdateFrozenCause() *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateFrozenCause()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *UserFrozenUpsertBulk) SetCreateAt(v uint32) *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *UserFrozenUpsertBulk) AddCreateAt(v uint32) *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserFrozenUpsertBulk) UpdateCreateAt() *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateCreateAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *UserFrozenUpsertBulk) SetEndAt(v uint32) *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *UserFrozenUpsertBulk) AddEndAt(v uint32) *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *UserFrozenUpsertBulk) UpdateEndAt() *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateEndAt()
	})
}

// SetStatus sets the "status" field.
func (u *UserFrozenUpsertBulk) SetStatus(v string) *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserFrozenUpsertBulk) UpdateStatus() *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateStatus()
	})
}

// SetUnfrozenBy sets the "unfrozen_by" field.
func (u *UserFrozenUpsertBulk) SetUnfrozenBy(v uuid.UUID) *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.SetUnfrozenBy(v)
	})
}

// UpdateUnfrozenBy sets the "unfrozen_by" field to the value that was provided on create.
func (u *UserFrozenUpsertBulk) UpdateUnfrozenBy() *UserFrozenUpsertBulk {
	return u.Update(func(s *UserFrozenUpsert) {
		s.UpdateUnfrozenBy()
	})
}

// Exec executes the query.
func (u *UserFrozenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserFrozenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserFrozenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserFrozenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
