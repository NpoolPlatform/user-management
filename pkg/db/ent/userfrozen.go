// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/userfrozen"
	"github.com/google/uuid"
)

// UserFrozen is the model entity for the UserFrozen schema.
type UserFrozen struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// FrozenBy holds the value of the "frozen_by" field.
	FrozenBy uuid.UUID `json:"frozen_by,omitempty"`
	// FrozenCause holds the value of the "frozen_cause" field.
	FrozenCause string `json:"frozen_cause,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt int64 `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt int64 `json:"end_at,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// UnfrozenBy holds the value of the "unfrozen_by" field.
	UnfrozenBy uuid.UUID `json:"unfrozen_by,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserFrozen) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userfrozen.FieldStartAt, userfrozen.FieldEndAt:
			values[i] = new(sql.NullInt64)
		case userfrozen.FieldFrozenCause, userfrozen.FieldStatus:
			values[i] = new(sql.NullString)
		case userfrozen.FieldID, userfrozen.FieldUserID, userfrozen.FieldFrozenBy, userfrozen.FieldUnfrozenBy:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserFrozen", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserFrozen fields.
func (uf *UserFrozen) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userfrozen.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				uf.ID = *value
			}
		case userfrozen.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				uf.UserID = *value
			}
		case userfrozen.FieldFrozenBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field frozen_by", values[i])
			} else if value != nil {
				uf.FrozenBy = *value
			}
		case userfrozen.FieldFrozenCause:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field frozen_cause", values[i])
			} else if value.Valid {
				uf.FrozenCause = value.String
			}
		case userfrozen.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				uf.StartAt = value.Int64
			}
		case userfrozen.FieldEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				uf.EndAt = value.Int64
			}
		case userfrozen.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				uf.Status = value.String
			}
		case userfrozen.FieldUnfrozenBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field unfrozen_by", values[i])
			} else if value != nil {
				uf.UnfrozenBy = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserFrozen.
// Note that you need to call UserFrozen.Unwrap() before calling this method if this UserFrozen
// was returned from a transaction, and the transaction was committed or rolled back.
func (uf *UserFrozen) Update() *UserFrozenUpdateOne {
	return (&UserFrozenClient{config: uf.config}).UpdateOne(uf)
}

// Unwrap unwraps the UserFrozen entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uf *UserFrozen) Unwrap() *UserFrozen {
	tx, ok := uf.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserFrozen is not a transactional entity")
	}
	uf.config.driver = tx.drv
	return uf
}

// String implements the fmt.Stringer.
func (uf *UserFrozen) String() string {
	var builder strings.Builder
	builder.WriteString("UserFrozen(")
	builder.WriteString(fmt.Sprintf("id=%v", uf.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", uf.UserID))
	builder.WriteString(", frozen_by=")
	builder.WriteString(fmt.Sprintf("%v", uf.FrozenBy))
	builder.WriteString(", frozen_cause=")
	builder.WriteString(uf.FrozenCause)
	builder.WriteString(", start_at=")
	builder.WriteString(fmt.Sprintf("%v", uf.StartAt))
	builder.WriteString(", end_at=")
	builder.WriteString(fmt.Sprintf("%v", uf.EndAt))
	builder.WriteString(", status=")
	builder.WriteString(uf.Status)
	builder.WriteString(", unfrozen_by=")
	builder.WriteString(fmt.Sprintf("%v", uf.UnfrozenBy))
	builder.WriteByte(')')
	return builder.String()
}

// UserFrozens is a parsable slice of UserFrozen.
type UserFrozens []*UserFrozen

func (uf UserFrozens) config(cfg config) {
	for _i := range uf {
		uf[_i].config = cfg
	}
}
