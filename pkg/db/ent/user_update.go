// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/user"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetSalt sets the "salt" field.
func (uu *UserUpdate) SetSalt(s string) *UserUpdate {
	uu.mutation.SetSalt(s)
	return uu
}

// SetDisplayName sets the "display_name" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDisplayName(s *string) *UserUpdate {
	if s != nil {
		uu.SetDisplayName(*s)
	}
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetEmailAddress sets the "email_address" field.
func (uu *UserUpdate) SetEmailAddress(s string) *UserUpdate {
	uu.mutation.SetEmailAddress(s)
	return uu
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmailAddress(*s)
	}
	return uu
}

// ClearEmailAddress clears the value of the "email_address" field.
func (uu *UserUpdate) ClearEmailAddress() *UserUpdate {
	uu.mutation.ClearEmailAddress()
	return uu
}

// SetAppID sets the "app_id" field.
func (uu *UserUpdate) SetAppID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetAppID(u)
	return uu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAppID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetAppID(*u)
	}
	return uu
}

// SetSignupMethod sets the "signup_method" field.
func (uu *UserUpdate) SetSignupMethod(s string) *UserUpdate {
	uu.mutation.SetSignupMethod(s)
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// SetRegion sets the "region" field.
func (uu *UserUpdate) SetRegion(s string) *UserUpdate {
	uu.mutation.SetRegion(s)
	return uu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRegion(s *string) *UserUpdate {
	if s != nil {
		uu.SetRegion(*s)
	}
	return uu
}

// SetAge sets the "age" field.
func (uu *UserUpdate) SetAge(u uint32) *UserUpdate {
	uu.mutation.ResetAge()
	uu.mutation.SetAge(u)
	return uu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAge(u *uint32) *UserUpdate {
	if u != nil {
		uu.SetAge(*u)
	}
	return uu
}

// AddAge adds u to the "age" field.
func (uu *UserUpdate) AddAge(u int32) *UserUpdate {
	uu.mutation.AddAge(u)
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(s string) *UserUpdate {
	uu.mutation.SetGender(s)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(s *string) *UserUpdate {
	if s != nil {
		uu.SetGender(*s)
	}
	return uu
}

// SetBirthday sets the "birthday" field.
func (uu *UserUpdate) SetBirthday(s string) *UserUpdate {
	uu.mutation.SetBirthday(s)
	return uu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthday(s *string) *UserUpdate {
	if s != nil {
		uu.SetBirthday(*s)
	}
	return uu
}

// SetCountry sets the "country" field.
func (uu *UserUpdate) SetCountry(s string) *UserUpdate {
	uu.mutation.SetCountry(s)
	return uu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCountry(s *string) *UserUpdate {
	if s != nil {
		uu.SetCountry(*s)
	}
	return uu
}

// SetProvince sets the "province" field.
func (uu *UserUpdate) SetProvince(s string) *UserUpdate {
	uu.mutation.SetProvince(s)
	return uu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProvince(s *string) *UserUpdate {
	if s != nil {
		uu.SetProvince(*s)
	}
	return uu
}

// SetCity sets the "city" field.
func (uu *UserUpdate) SetCity(s string) *UserUpdate {
	uu.mutation.SetCity(s)
	return uu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCity(s *string) *UserUpdate {
	if s != nil {
		uu.SetCity(*s)
	}
	return uu
}

// SetCareer sets the "career" field.
func (uu *UserUpdate) SetCareer(s string) *UserUpdate {
	uu.mutation.SetCareer(s)
	return uu
}

// SetNillableCareer sets the "career" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCareer(s *string) *UserUpdate {
	if s != nil {
		uu.SetCareer(*s)
	}
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// SetStreetAddress1 sets the "street_address1" field.
func (uu *UserUpdate) SetStreetAddress1(s string) *UserUpdate {
	uu.mutation.SetStreetAddress1(s)
	return uu
}

// SetNillableStreetAddress1 sets the "street_address1" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStreetAddress1(s *string) *UserUpdate {
	if s != nil {
		uu.SetStreetAddress1(*s)
	}
	return uu
}

// SetStreetAddress2 sets the "street_address2" field.
func (uu *UserUpdate) SetStreetAddress2(s string) *UserUpdate {
	uu.mutation.SetStreetAddress2(s)
	return uu
}

// SetNillableStreetAddress2 sets the "street_address2" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStreetAddress2(s *string) *UserUpdate {
	if s != nil {
		uu.SetStreetAddress2(*s)
	}
	return uu
}

// SetCompony sets the "compony" field.
func (uu *UserUpdate) SetCompony(s string) *UserUpdate {
	uu.mutation.SetCompony(s)
	return uu
}

// SetNillableCompony sets the "compony" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCompony(s *string) *UserUpdate {
	if s != nil {
		uu.SetCompony(*s)
	}
	return uu
}

// SetPostalCode sets the "postal_code" field.
func (uu *UserUpdate) SetPostalCode(s string) *UserUpdate {
	uu.mutation.SetPostalCode(s)
	return uu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePostalCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetPostalCode(*s)
	}
	return uu
}

// SetCreateAt sets the "create_at" field.
func (uu *UserUpdate) SetCreateAt(u uint32) *UserUpdate {
	uu.mutation.ResetCreateAt()
	uu.mutation.SetCreateAt(u)
	return uu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreateAt(u *uint32) *UserUpdate {
	if u != nil {
		uu.SetCreateAt(*u)
	}
	return uu
}

// AddCreateAt adds u to the "create_at" field.
func (uu *UserUpdate) AddCreateAt(u int32) *UserUpdate {
	uu.mutation.AddCreateAt(u)
	return uu
}

// SetUpdateAt sets the "update_at" field.
func (uu *UserUpdate) SetUpdateAt(u uint32) *UserUpdate {
	uu.mutation.ResetUpdateAt()
	uu.mutation.SetUpdateAt(u)
	return uu
}

// AddUpdateAt adds u to the "update_at" field.
func (uu *UserUpdate) AddUpdateAt(u int32) *UserUpdate {
	uu.mutation.AddUpdateAt(u)
	return uu
}

// SetDeleteAt sets the "delete_at" field.
func (uu *UserUpdate) SetDeleteAt(u uint32) *UserUpdate {
	uu.mutation.ResetDeleteAt()
	uu.mutation.SetDeleteAt(u)
	return uu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeleteAt(u *uint32) *UserUpdate {
	if u != nil {
		uu.SetDeleteAt(*u)
	}
	return uu
}

// AddDeleteAt adds u to the "delete_at" field.
func (uu *UserUpdate) AddDeleteAt(u int32) *UserUpdate {
	uu.mutation.AddDeleteAt(u)
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uu.defaults()
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdateAt(); !ok {
		v := user.UpdateDefaultUpdateAt()
		uu.mutation.SetUpdateAt(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSalt,
		})
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDisplayName,
		})
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhoneNumber,
		})
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPhoneNumber,
		})
	}
	if value, ok := uu.mutation.EmailAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmailAddress,
		})
	}
	if uu.mutation.EmailAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldEmailAddress,
		})
	}
	if value, ok := uu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: user.FieldAppID,
		})
	}
	if value, ok := uu.mutation.SignupMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSignupMethod,
		})
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatar,
		})
	}
	if value, ok := uu.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRegion,
		})
	}
	if value, ok := uu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldBirthday,
		})
	}
	if value, ok := uu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldCountry,
		})
	}
	if value, ok := uu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldProvince,
		})
	}
	if value, ok := uu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldCity,
		})
	}
	if value, ok := uu.mutation.Career(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldCareer,
		})
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFirstName,
		})
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLastName,
		})
	}
	if value, ok := uu.mutation.StreetAddress1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldStreetAddress1,
		})
	}
	if value, ok := uu.mutation.StreetAddress2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldStreetAddress2,
		})
	}
	if value, ok := uu.mutation.Compony(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldCompony,
		})
	}
	if value, ok := uu.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPostalCode,
		})
	}
	if value, ok := uu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldCreateAt,
		})
	}
	if value, ok := uu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldCreateAt,
		})
	}
	if value, ok := uu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldUpdateAt,
		})
	}
	if value, ok := uu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldUpdateAt,
		})
	}
	if value, ok := uu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldDeleteAt,
		})
	}
	if value, ok := uu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetSalt sets the "salt" field.
func (uuo *UserUpdateOne) SetSalt(s string) *UserUpdateOne {
	uuo.mutation.SetSalt(s)
	return uuo
}

// SetDisplayName sets the "display_name" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDisplayName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDisplayName(*s)
	}
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetEmailAddress sets the "email_address" field.
func (uuo *UserUpdateOne) SetEmailAddress(s string) *UserUpdateOne {
	uuo.mutation.SetEmailAddress(s)
	return uuo
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmailAddress(*s)
	}
	return uuo
}

// ClearEmailAddress clears the value of the "email_address" field.
func (uuo *UserUpdateOne) ClearEmailAddress() *UserUpdateOne {
	uuo.mutation.ClearEmailAddress()
	return uuo
}

// SetAppID sets the "app_id" field.
func (uuo *UserUpdateOne) SetAppID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetAppID(u)
	return uuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAppID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetAppID(*u)
	}
	return uuo
}

// SetSignupMethod sets the "signup_method" field.
func (uuo *UserUpdateOne) SetSignupMethod(s string) *UserUpdateOne {
	uuo.mutation.SetSignupMethod(s)
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// SetRegion sets the "region" field.
func (uuo *UserUpdateOne) SetRegion(s string) *UserUpdateOne {
	uuo.mutation.SetRegion(s)
	return uuo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRegion(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRegion(*s)
	}
	return uuo
}

// SetAge sets the "age" field.
func (uuo *UserUpdateOne) SetAge(u uint32) *UserUpdateOne {
	uuo.mutation.ResetAge()
	uuo.mutation.SetAge(u)
	return uuo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAge(u *uint32) *UserUpdateOne {
	if u != nil {
		uuo.SetAge(*u)
	}
	return uuo
}

// AddAge adds u to the "age" field.
func (uuo *UserUpdateOne) AddAge(u int32) *UserUpdateOne {
	uuo.mutation.AddAge(u)
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(s string) *UserUpdateOne {
	uuo.mutation.SetGender(s)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGender(*s)
	}
	return uuo
}

// SetBirthday sets the "birthday" field.
func (uuo *UserUpdateOne) SetBirthday(s string) *UserUpdateOne {
	uuo.mutation.SetBirthday(s)
	return uuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthday(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBirthday(*s)
	}
	return uuo
}

// SetCountry sets the "country" field.
func (uuo *UserUpdateOne) SetCountry(s string) *UserUpdateOne {
	uuo.mutation.SetCountry(s)
	return uuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCountry(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCountry(*s)
	}
	return uuo
}

// SetProvince sets the "province" field.
func (uuo *UserUpdateOne) SetProvince(s string) *UserUpdateOne {
	uuo.mutation.SetProvince(s)
	return uuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProvince(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetProvince(*s)
	}
	return uuo
}

// SetCity sets the "city" field.
func (uuo *UserUpdateOne) SetCity(s string) *UserUpdateOne {
	uuo.mutation.SetCity(s)
	return uuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCity(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCity(*s)
	}
	return uuo
}

// SetCareer sets the "career" field.
func (uuo *UserUpdateOne) SetCareer(s string) *UserUpdateOne {
	uuo.mutation.SetCareer(s)
	return uuo
}

// SetNillableCareer sets the "career" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCareer(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCareer(*s)
	}
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// SetStreetAddress1 sets the "street_address1" field.
func (uuo *UserUpdateOne) SetStreetAddress1(s string) *UserUpdateOne {
	uuo.mutation.SetStreetAddress1(s)
	return uuo
}

// SetNillableStreetAddress1 sets the "street_address1" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStreetAddress1(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetStreetAddress1(*s)
	}
	return uuo
}

// SetStreetAddress2 sets the "street_address2" field.
func (uuo *UserUpdateOne) SetStreetAddress2(s string) *UserUpdateOne {
	uuo.mutation.SetStreetAddress2(s)
	return uuo
}

// SetNillableStreetAddress2 sets the "street_address2" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStreetAddress2(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetStreetAddress2(*s)
	}
	return uuo
}

// SetCompony sets the "compony" field.
func (uuo *UserUpdateOne) SetCompony(s string) *UserUpdateOne {
	uuo.mutation.SetCompony(s)
	return uuo
}

// SetNillableCompony sets the "compony" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCompony(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCompony(*s)
	}
	return uuo
}

// SetPostalCode sets the "postal_code" field.
func (uuo *UserUpdateOne) SetPostalCode(s string) *UserUpdateOne {
	uuo.mutation.SetPostalCode(s)
	return uuo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePostalCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPostalCode(*s)
	}
	return uuo
}

// SetCreateAt sets the "create_at" field.
func (uuo *UserUpdateOne) SetCreateAt(u uint32) *UserUpdateOne {
	uuo.mutation.ResetCreateAt()
	uuo.mutation.SetCreateAt(u)
	return uuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreateAt(u *uint32) *UserUpdateOne {
	if u != nil {
		uuo.SetCreateAt(*u)
	}
	return uuo
}

// AddCreateAt adds u to the "create_at" field.
func (uuo *UserUpdateOne) AddCreateAt(u int32) *UserUpdateOne {
	uuo.mutation.AddCreateAt(u)
	return uuo
}

// SetUpdateAt sets the "update_at" field.
func (uuo *UserUpdateOne) SetUpdateAt(u uint32) *UserUpdateOne {
	uuo.mutation.ResetUpdateAt()
	uuo.mutation.SetUpdateAt(u)
	return uuo
}

// AddUpdateAt adds u to the "update_at" field.
func (uuo *UserUpdateOne) AddUpdateAt(u int32) *UserUpdateOne {
	uuo.mutation.AddUpdateAt(u)
	return uuo
}

// SetDeleteAt sets the "delete_at" field.
func (uuo *UserUpdateOne) SetDeleteAt(u uint32) *UserUpdateOne {
	uuo.mutation.ResetDeleteAt()
	uuo.mutation.SetDeleteAt(u)
	return uuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeleteAt(u *uint32) *UserUpdateOne {
	if u != nil {
		uuo.SetDeleteAt(*u)
	}
	return uuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (uuo *UserUpdateOne) AddDeleteAt(u int32) *UserUpdateOne {
	uuo.mutation.AddDeleteAt(u)
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uuo.defaults()
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdateAt(); !ok {
		v := user.UpdateDefaultUpdateAt()
		uuo.mutation.SetUpdateAt(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSalt,
		})
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDisplayName,
		})
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhoneNumber,
		})
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPhoneNumber,
		})
	}
	if value, ok := uuo.mutation.EmailAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmailAddress,
		})
	}
	if uuo.mutation.EmailAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldEmailAddress,
		})
	}
	if value, ok := uuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: user.FieldAppID,
		})
	}
	if value, ok := uuo.mutation.SignupMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSignupMethod,
		})
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatar,
		})
	}
	if value, ok := uuo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRegion,
		})
	}
	if value, ok := uuo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uuo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uuo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldBirthday,
		})
	}
	if value, ok := uuo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldCountry,
		})
	}
	if value, ok := uuo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldProvince,
		})
	}
	if value, ok := uuo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldCity,
		})
	}
	if value, ok := uuo.mutation.Career(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldCareer,
		})
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFirstName,
		})
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLastName,
		})
	}
	if value, ok := uuo.mutation.StreetAddress1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldStreetAddress1,
		})
	}
	if value, ok := uuo.mutation.StreetAddress2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldStreetAddress2,
		})
	}
	if value, ok := uuo.mutation.Compony(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldCompony,
		})
	}
	if value, ok := uuo.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPostalCode,
		})
	}
	if value, ok := uuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldCreateAt,
		})
	}
	if value, ok := uuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldCreateAt,
		})
	}
	if value, ok := uuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldUpdateAt,
		})
	}
	if value, ok := uuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldUpdateAt,
		})
	}
	if value, ok := uuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldDeleteAt,
		})
	}
	if value, ok := uuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: user.FieldDeleteAt,
		})
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
