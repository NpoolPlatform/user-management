// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/NpoolPlatform/user-management/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/user-management/pkg/db/ent/user"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/userfrozen"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/userprovider"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserFrozen is the client for interacting with the UserFrozen builders.
	UserFrozen *UserFrozenClient
	// UserProvider is the client for interacting with the UserProvider builders.
	UserProvider *UserProviderClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.User = NewUserClient(c.config)
	c.UserFrozen = NewUserFrozenClient(c.config)
	c.UserProvider = NewUserProviderClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		User:         NewUserClient(cfg),
		UserFrozen:   NewUserFrozenClient(cfg),
		UserProvider: NewUserProviderClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		User:         NewUserClient(cfg),
		UserFrozen:   NewUserFrozenClient(cfg),
		UserProvider: NewUserProviderClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		User.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.User.Use(hooks...)
	c.UserFrozen.Use(hooks...)
	c.UserProvider.Use(hooks...)
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserFrozenClient is a client for the UserFrozen schema.
type UserFrozenClient struct {
	config
}

// NewUserFrozenClient returns a client for the UserFrozen from the given config.
func NewUserFrozenClient(c config) *UserFrozenClient {
	return &UserFrozenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userfrozen.Hooks(f(g(h())))`.
func (c *UserFrozenClient) Use(hooks ...Hook) {
	c.hooks.UserFrozen = append(c.hooks.UserFrozen, hooks...)
}

// Create returns a create builder for UserFrozen.
func (c *UserFrozenClient) Create() *UserFrozenCreate {
	mutation := newUserFrozenMutation(c.config, OpCreate)
	return &UserFrozenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserFrozen entities.
func (c *UserFrozenClient) CreateBulk(builders ...*UserFrozenCreate) *UserFrozenCreateBulk {
	return &UserFrozenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserFrozen.
func (c *UserFrozenClient) Update() *UserFrozenUpdate {
	mutation := newUserFrozenMutation(c.config, OpUpdate)
	return &UserFrozenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserFrozenClient) UpdateOne(uf *UserFrozen) *UserFrozenUpdateOne {
	mutation := newUserFrozenMutation(c.config, OpUpdateOne, withUserFrozen(uf))
	return &UserFrozenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserFrozenClient) UpdateOneID(id uuid.UUID) *UserFrozenUpdateOne {
	mutation := newUserFrozenMutation(c.config, OpUpdateOne, withUserFrozenID(id))
	return &UserFrozenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserFrozen.
func (c *UserFrozenClient) Delete() *UserFrozenDelete {
	mutation := newUserFrozenMutation(c.config, OpDelete)
	return &UserFrozenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserFrozenClient) DeleteOne(uf *UserFrozen) *UserFrozenDeleteOne {
	return c.DeleteOneID(uf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserFrozenClient) DeleteOneID(id uuid.UUID) *UserFrozenDeleteOne {
	builder := c.Delete().Where(userfrozen.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserFrozenDeleteOne{builder}
}

// Query returns a query builder for UserFrozen.
func (c *UserFrozenClient) Query() *UserFrozenQuery {
	return &UserFrozenQuery{
		config: c.config,
	}
}

// Get returns a UserFrozen entity by its id.
func (c *UserFrozenClient) Get(ctx context.Context, id uuid.UUID) (*UserFrozen, error) {
	return c.Query().Where(userfrozen.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserFrozenClient) GetX(ctx context.Context, id uuid.UUID) *UserFrozen {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserFrozenClient) Hooks() []Hook {
	return c.hooks.UserFrozen
}

// UserProviderClient is a client for the UserProvider schema.
type UserProviderClient struct {
	config
}

// NewUserProviderClient returns a client for the UserProvider from the given config.
func NewUserProviderClient(c config) *UserProviderClient {
	return &UserProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userprovider.Hooks(f(g(h())))`.
func (c *UserProviderClient) Use(hooks ...Hook) {
	c.hooks.UserProvider = append(c.hooks.UserProvider, hooks...)
}

// Create returns a create builder for UserProvider.
func (c *UserProviderClient) Create() *UserProviderCreate {
	mutation := newUserProviderMutation(c.config, OpCreate)
	return &UserProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserProvider entities.
func (c *UserProviderClient) CreateBulk(builders ...*UserProviderCreate) *UserProviderCreateBulk {
	return &UserProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserProvider.
func (c *UserProviderClient) Update() *UserProviderUpdate {
	mutation := newUserProviderMutation(c.config, OpUpdate)
	return &UserProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserProviderClient) UpdateOne(up *UserProvider) *UserProviderUpdateOne {
	mutation := newUserProviderMutation(c.config, OpUpdateOne, withUserProvider(up))
	return &UserProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserProviderClient) UpdateOneID(id uuid.UUID) *UserProviderUpdateOne {
	mutation := newUserProviderMutation(c.config, OpUpdateOne, withUserProviderID(id))
	return &UserProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserProvider.
func (c *UserProviderClient) Delete() *UserProviderDelete {
	mutation := newUserProviderMutation(c.config, OpDelete)
	return &UserProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserProviderClient) DeleteOne(up *UserProvider) *UserProviderDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserProviderClient) DeleteOneID(id uuid.UUID) *UserProviderDeleteOne {
	builder := c.Delete().Where(userprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserProviderDeleteOne{builder}
}

// Query returns a query builder for UserProvider.
func (c *UserProviderClient) Query() *UserProviderQuery {
	return &UserProviderQuery{
		config: c.config,
	}
}

// Get returns a UserProvider entity by its id.
func (c *UserProviderClient) Get(ctx context.Context, id uuid.UUID) (*UserProvider, error) {
	return c.Query().Where(userprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserProviderClient) GetX(ctx context.Context, id uuid.UUID) *UserProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserProviderClient) Hooks() []Hook {
	return c.hooks.UserProvider
}
