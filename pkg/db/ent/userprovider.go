// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/userprovider"
	"github.com/google/uuid"
)

// UserProvider is the model entity for the UserProvider schema.
type UserProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID uuid.UUID `json:"provider_id,omitempty"`
	// ProviderUserID holds the value of the "provider_user_id" field.
	ProviderUserID string `json:"provider_user_id,omitempty"`
	// UserProviderInfo holds the value of the "user_provider_info" field.
	UserProviderInfo string `json:"user_provider_info,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt int64 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt int64 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt int64 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserProvider) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userprovider.FieldCreateAt, userprovider.FieldUpdateAt, userprovider.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case userprovider.FieldProviderUserID, userprovider.FieldUserProviderInfo:
			values[i] = new(sql.NullString)
		case userprovider.FieldID, userprovider.FieldUserID, userprovider.FieldProviderID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserProvider", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserProvider fields.
func (up *UserProvider) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userprovider.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				up.ID = *value
			}
		case userprovider.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				up.UserID = *value
			}
		case userprovider.FieldProviderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value != nil {
				up.ProviderID = *value
			}
		case userprovider.FieldProviderUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_user_id", values[i])
			} else if value.Valid {
				up.ProviderUserID = value.String
			}
		case userprovider.FieldUserProviderInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_provider_info", values[i])
			} else if value.Valid {
				up.UserProviderInfo = value.String
			}
		case userprovider.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				up.CreateAt = value.Int64
			}
		case userprovider.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				up.UpdateAt = value.Int64
			}
		case userprovider.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				up.DeleteAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserProvider.
// Note that you need to call UserProvider.Unwrap() before calling this method if this UserProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserProvider) Update() *UserProviderUpdateOne {
	return (&UserProviderClient{config: up.config}).UpdateOne(up)
}

// Unwrap unwraps the UserProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserProvider) Unwrap() *UserProvider {
	tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserProvider is not a transactional entity")
	}
	up.config.driver = tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserProvider) String() string {
	var builder strings.Builder
	builder.WriteString("UserProvider(")
	builder.WriteString(fmt.Sprintf("id=%v", up.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", up.UserID))
	builder.WriteString(", provider_id=")
	builder.WriteString(fmt.Sprintf("%v", up.ProviderID))
	builder.WriteString(", provider_user_id=")
	builder.WriteString(up.ProviderUserID)
	builder.WriteString(", user_provider_info=")
	builder.WriteString(up.UserProviderInfo)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", up.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", up.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", up.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// UserProviders is a parsable slice of UserProvider.
type UserProviders []*UserProvider

func (up UserProviders) config(cfg config) {
	for _i := range up {
		up[_i].config = cfg
	}
}
