// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/userfrozen"
	"github.com/google/uuid"
)

// UserFrozenUpdate is the builder for updating UserFrozen entities.
type UserFrozenUpdate struct {
	config
	hooks    []Hook
	mutation *UserFrozenMutation
}

// Where appends a list predicates to the UserFrozenUpdate builder.
func (ufu *UserFrozenUpdate) Where(ps ...predicate.UserFrozen) *UserFrozenUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetUserID sets the "user_id" field.
func (ufu *UserFrozenUpdate) SetUserID(u uuid.UUID) *UserFrozenUpdate {
	ufu.mutation.SetUserID(u)
	return ufu
}

// SetFrozenBy sets the "frozen_by" field.
func (ufu *UserFrozenUpdate) SetFrozenBy(u uuid.UUID) *UserFrozenUpdate {
	ufu.mutation.SetFrozenBy(u)
	return ufu
}

// SetFrozenCause sets the "frozen_cause" field.
func (ufu *UserFrozenUpdate) SetFrozenCause(s string) *UserFrozenUpdate {
	ufu.mutation.SetFrozenCause(s)
	return ufu
}

// SetCreateAt sets the "create_at" field.
func (ufu *UserFrozenUpdate) SetCreateAt(u uint32) *UserFrozenUpdate {
	ufu.mutation.ResetCreateAt()
	ufu.mutation.SetCreateAt(u)
	return ufu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufu *UserFrozenUpdate) SetNillableCreateAt(u *uint32) *UserFrozenUpdate {
	if u != nil {
		ufu.SetCreateAt(*u)
	}
	return ufu
}

// AddCreateAt adds u to the "create_at" field.
func (ufu *UserFrozenUpdate) AddCreateAt(u int32) *UserFrozenUpdate {
	ufu.mutation.AddCreateAt(u)
	return ufu
}

// SetEndAt sets the "end_at" field.
func (ufu *UserFrozenUpdate) SetEndAt(u uint32) *UserFrozenUpdate {
	ufu.mutation.ResetEndAt()
	ufu.mutation.SetEndAt(u)
	return ufu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ufu *UserFrozenUpdate) SetNillableEndAt(u *uint32) *UserFrozenUpdate {
	if u != nil {
		ufu.SetEndAt(*u)
	}
	return ufu
}

// AddEndAt adds u to the "end_at" field.
func (ufu *UserFrozenUpdate) AddEndAt(u int32) *UserFrozenUpdate {
	ufu.mutation.AddEndAt(u)
	return ufu
}

// SetStatus sets the "status" field.
func (ufu *UserFrozenUpdate) SetStatus(s string) *UserFrozenUpdate {
	ufu.mutation.SetStatus(s)
	return ufu
}

// SetUnfrozenBy sets the "unfrozen_by" field.
func (ufu *UserFrozenUpdate) SetUnfrozenBy(u uuid.UUID) *UserFrozenUpdate {
	ufu.mutation.SetUnfrozenBy(u)
	return ufu
}

// Mutation returns the UserFrozenMutation object of the builder.
func (ufu *UserFrozenUpdate) Mutation() *UserFrozenMutation {
	return ufu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UserFrozenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ufu.hooks) == 0 {
		affected, err = ufu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserFrozenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ufu.mutation = mutation
			affected, err = ufu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ufu.hooks) - 1; i >= 0; i-- {
			if ufu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ufu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ufu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UserFrozenUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UserFrozenUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UserFrozenUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufu *UserFrozenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userfrozen.Table,
			Columns: userfrozen.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userfrozen.FieldID,
			},
		},
	}
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userfrozen.FieldUserID,
		})
	}
	if value, ok := ufu.mutation.FrozenBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userfrozen.FieldFrozenBy,
		})
	}
	if value, ok := ufu.mutation.FrozenCause(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userfrozen.FieldFrozenCause,
		})
	}
	if value, ok := ufu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldCreateAt,
		})
	}
	if value, ok := ufu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldCreateAt,
		})
	}
	if value, ok := ufu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldEndAt,
		})
	}
	if value, ok := ufu.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldEndAt,
		})
	}
	if value, ok := ufu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userfrozen.FieldStatus,
		})
	}
	if value, ok := ufu.mutation.UnfrozenBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userfrozen.FieldUnfrozenBy,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfrozen.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserFrozenUpdateOne is the builder for updating a single UserFrozen entity.
type UserFrozenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFrozenMutation
}

// SetUserID sets the "user_id" field.
func (ufuo *UserFrozenUpdateOne) SetUserID(u uuid.UUID) *UserFrozenUpdateOne {
	ufuo.mutation.SetUserID(u)
	return ufuo
}

// SetFrozenBy sets the "frozen_by" field.
func (ufuo *UserFrozenUpdateOne) SetFrozenBy(u uuid.UUID) *UserFrozenUpdateOne {
	ufuo.mutation.SetFrozenBy(u)
	return ufuo
}

// SetFrozenCause sets the "frozen_cause" field.
func (ufuo *UserFrozenUpdateOne) SetFrozenCause(s string) *UserFrozenUpdateOne {
	ufuo.mutation.SetFrozenCause(s)
	return ufuo
}

// SetCreateAt sets the "create_at" field.
func (ufuo *UserFrozenUpdateOne) SetCreateAt(u uint32) *UserFrozenUpdateOne {
	ufuo.mutation.ResetCreateAt()
	ufuo.mutation.SetCreateAt(u)
	return ufuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufuo *UserFrozenUpdateOne) SetNillableCreateAt(u *uint32) *UserFrozenUpdateOne {
	if u != nil {
		ufuo.SetCreateAt(*u)
	}
	return ufuo
}

// AddCreateAt adds u to the "create_at" field.
func (ufuo *UserFrozenUpdateOne) AddCreateAt(u int32) *UserFrozenUpdateOne {
	ufuo.mutation.AddCreateAt(u)
	return ufuo
}

// SetEndAt sets the "end_at" field.
func (ufuo *UserFrozenUpdateOne) SetEndAt(u uint32) *UserFrozenUpdateOne {
	ufuo.mutation.ResetEndAt()
	ufuo.mutation.SetEndAt(u)
	return ufuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ufuo *UserFrozenUpdateOne) SetNillableEndAt(u *uint32) *UserFrozenUpdateOne {
	if u != nil {
		ufuo.SetEndAt(*u)
	}
	return ufuo
}

// AddEndAt adds u to the "end_at" field.
func (ufuo *UserFrozenUpdateOne) AddEndAt(u int32) *UserFrozenUpdateOne {
	ufuo.mutation.AddEndAt(u)
	return ufuo
}

// SetStatus sets the "status" field.
func (ufuo *UserFrozenUpdateOne) SetStatus(s string) *UserFrozenUpdateOne {
	ufuo.mutation.SetStatus(s)
	return ufuo
}

// SetUnfrozenBy sets the "unfrozen_by" field.
func (ufuo *UserFrozenUpdateOne) SetUnfrozenBy(u uuid.UUID) *UserFrozenUpdateOne {
	ufuo.mutation.SetUnfrozenBy(u)
	return ufuo
}

// Mutation returns the UserFrozenMutation object of the builder.
func (ufuo *UserFrozenUpdateOne) Mutation() *UserFrozenMutation {
	return ufuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UserFrozenUpdateOne) Select(field string, fields ...string) *UserFrozenUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UserFrozen entity.
func (ufuo *UserFrozenUpdateOne) Save(ctx context.Context) (*UserFrozen, error) {
	var (
		err  error
		node *UserFrozen
	)
	if len(ufuo.hooks) == 0 {
		node, err = ufuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserFrozenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ufuo.mutation = mutation
			node, err = ufuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ufuo.hooks) - 1; i >= 0; i-- {
			if ufuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ufuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ufuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UserFrozenUpdateOne) SaveX(ctx context.Context) *UserFrozen {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UserFrozenUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UserFrozenUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufuo *UserFrozenUpdateOne) sqlSave(ctx context.Context) (_node *UserFrozen, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userfrozen.Table,
			Columns: userfrozen.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userfrozen.FieldID,
			},
		},
	}
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFrozen.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfrozen.FieldID)
		for _, f := range fields {
			if !userfrozen.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfrozen.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userfrozen.FieldUserID,
		})
	}
	if value, ok := ufuo.mutation.FrozenBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userfrozen.FieldFrozenBy,
		})
	}
	if value, ok := ufuo.mutation.FrozenCause(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userfrozen.FieldFrozenCause,
		})
	}
	if value, ok := ufuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldCreateAt,
		})
	}
	if value, ok := ufuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldCreateAt,
		})
	}
	if value, ok := ufuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldEndAt,
		})
	}
	if value, ok := ufuo.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userfrozen.FieldEndAt,
		})
	}
	if value, ok := ufuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userfrozen.FieldStatus,
		})
	}
	if value, ok := ufuo.mutation.UnfrozenBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userfrozen.FieldUnfrozenBy,
		})
	}
	_node = &UserFrozen{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfrozen.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
