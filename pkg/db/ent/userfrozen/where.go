// Code generated by entc, DO NOT EDIT.

package userfrozen

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// FrozenBy applies equality check predicate on the "frozen_by" field. It's identical to FrozenByEQ.
func FrozenBy(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrozenBy), v))
	})
}

// FrozenCause applies equality check predicate on the "frozen_cause" field. It's identical to FrozenCauseEQ.
func FrozenCause(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrozenCause), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// UnfrozenBy applies equality check predicate on the "unfrozen_by" field. It's identical to UnfrozenByEQ.
func UnfrozenBy(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnfrozenBy), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// FrozenByEQ applies the EQ predicate on the "frozen_by" field.
func FrozenByEQ(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrozenBy), v))
	})
}

// FrozenByNEQ applies the NEQ predicate on the "frozen_by" field.
func FrozenByNEQ(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrozenBy), v))
	})
}

// FrozenByIn applies the In predicate on the "frozen_by" field.
func FrozenByIn(vs ...uuid.UUID) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFrozenBy), v...))
	})
}

// FrozenByNotIn applies the NotIn predicate on the "frozen_by" field.
func FrozenByNotIn(vs ...uuid.UUID) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFrozenBy), v...))
	})
}

// FrozenByGT applies the GT predicate on the "frozen_by" field.
func FrozenByGT(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrozenBy), v))
	})
}

// FrozenByGTE applies the GTE predicate on the "frozen_by" field.
func FrozenByGTE(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrozenBy), v))
	})
}

// FrozenByLT applies the LT predicate on the "frozen_by" field.
func FrozenByLT(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrozenBy), v))
	})
}

// FrozenByLTE applies the LTE predicate on the "frozen_by" field.
func FrozenByLTE(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrozenBy), v))
	})
}

// FrozenCauseEQ applies the EQ predicate on the "frozen_cause" field.
func FrozenCauseEQ(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseNEQ applies the NEQ predicate on the "frozen_cause" field.
func FrozenCauseNEQ(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseIn applies the In predicate on the "frozen_cause" field.
func FrozenCauseIn(vs ...string) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFrozenCause), v...))
	})
}

// FrozenCauseNotIn applies the NotIn predicate on the "frozen_cause" field.
func FrozenCauseNotIn(vs ...string) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFrozenCause), v...))
	})
}

// FrozenCauseGT applies the GT predicate on the "frozen_cause" field.
func FrozenCauseGT(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseGTE applies the GTE predicate on the "frozen_cause" field.
func FrozenCauseGTE(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseLT applies the LT predicate on the "frozen_cause" field.
func FrozenCauseLT(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseLTE applies the LTE predicate on the "frozen_cause" field.
func FrozenCauseLTE(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseContains applies the Contains predicate on the "frozen_cause" field.
func FrozenCauseContains(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseHasPrefix applies the HasPrefix predicate on the "frozen_cause" field.
func FrozenCauseHasPrefix(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseHasSuffix applies the HasSuffix predicate on the "frozen_cause" field.
func FrozenCauseHasSuffix(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseEqualFold applies the EqualFold predicate on the "frozen_cause" field.
func FrozenCauseEqualFold(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFrozenCause), v))
	})
}

// FrozenCauseContainsFold applies the ContainsFold predicate on the "frozen_cause" field.
func FrozenCauseContainsFold(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFrozenCause), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndAt), v))
	})
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...uint32) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndAt), v...))
	})
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...uint32) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndAt), v...))
	})
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndAt), v))
	})
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndAt), v))
	})
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndAt), v))
	})
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v uint32) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndAt), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// UnfrozenByEQ applies the EQ predicate on the "unfrozen_by" field.
func UnfrozenByEQ(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnfrozenBy), v))
	})
}

// UnfrozenByNEQ applies the NEQ predicate on the "unfrozen_by" field.
func UnfrozenByNEQ(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnfrozenBy), v))
	})
}

// UnfrozenByIn applies the In predicate on the "unfrozen_by" field.
func UnfrozenByIn(vs ...uuid.UUID) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnfrozenBy), v...))
	})
}

// UnfrozenByNotIn applies the NotIn predicate on the "unfrozen_by" field.
func UnfrozenByNotIn(vs ...uuid.UUID) predicate.UserFrozen {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserFrozen(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnfrozenBy), v...))
	})
}

// UnfrozenByGT applies the GT predicate on the "unfrozen_by" field.
func UnfrozenByGT(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnfrozenBy), v))
	})
}

// UnfrozenByGTE applies the GTE predicate on the "unfrozen_by" field.
func UnfrozenByGTE(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnfrozenBy), v))
	})
}

// UnfrozenByLT applies the LT predicate on the "unfrozen_by" field.
func UnfrozenByLT(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnfrozenBy), v))
	})
}

// UnfrozenByLTE applies the LTE predicate on the "unfrozen_by" field.
func UnfrozenByLTE(v uuid.UUID) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnfrozenBy), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserFrozen) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserFrozen) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserFrozen) predicate.UserFrozen {
	return predicate.UserFrozen(func(s *sql.Selector) {
		p(s.Not())
	})
}
