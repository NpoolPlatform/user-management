// Code generated by entc, DO NOT EDIT.

package userprovider

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/user-management/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderID), v))
	})
}

// ProviderUserID applies equality check predicate on the "provider_user_id" field. It's identical to ProviderUserIDEQ.
func ProviderUserID(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderUserID), v))
	})
}

// UserProviderInfo applies equality check predicate on the "user_provider_info" field. It's identical to UserProviderInfoEQ.
func UserProviderInfo(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserProviderInfo), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderID), v))
	})
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProviderID), v))
	})
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...uuid.UUID) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProviderID), v...))
	})
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...uuid.UUID) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProviderID), v...))
	})
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProviderID), v))
	})
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProviderID), v))
	})
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProviderID), v))
	})
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v uuid.UUID) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProviderID), v))
	})
}

// ProviderUserIDEQ applies the EQ predicate on the "provider_user_id" field.
func ProviderUserIDEQ(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDNEQ applies the NEQ predicate on the "provider_user_id" field.
func ProviderUserIDNEQ(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDIn applies the In predicate on the "provider_user_id" field.
func ProviderUserIDIn(vs ...string) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProviderUserID), v...))
	})
}

// ProviderUserIDNotIn applies the NotIn predicate on the "provider_user_id" field.
func ProviderUserIDNotIn(vs ...string) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProviderUserID), v...))
	})
}

// ProviderUserIDGT applies the GT predicate on the "provider_user_id" field.
func ProviderUserIDGT(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDGTE applies the GTE predicate on the "provider_user_id" field.
func ProviderUserIDGTE(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDLT applies the LT predicate on the "provider_user_id" field.
func ProviderUserIDLT(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDLTE applies the LTE predicate on the "provider_user_id" field.
func ProviderUserIDLTE(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDContains applies the Contains predicate on the "provider_user_id" field.
func ProviderUserIDContains(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDHasPrefix applies the HasPrefix predicate on the "provider_user_id" field.
func ProviderUserIDHasPrefix(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDHasSuffix applies the HasSuffix predicate on the "provider_user_id" field.
func ProviderUserIDHasSuffix(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDEqualFold applies the EqualFold predicate on the "provider_user_id" field.
func ProviderUserIDEqualFold(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProviderUserID), v))
	})
}

// ProviderUserIDContainsFold applies the ContainsFold predicate on the "provider_user_id" field.
func ProviderUserIDContainsFold(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProviderUserID), v))
	})
}

// UserProviderInfoEQ applies the EQ predicate on the "user_provider_info" field.
func UserProviderInfoEQ(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoNEQ applies the NEQ predicate on the "user_provider_info" field.
func UserProviderInfoNEQ(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoIn applies the In predicate on the "user_provider_info" field.
func UserProviderInfoIn(vs ...string) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserProviderInfo), v...))
	})
}

// UserProviderInfoNotIn applies the NotIn predicate on the "user_provider_info" field.
func UserProviderInfoNotIn(vs ...string) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserProviderInfo), v...))
	})
}

// UserProviderInfoGT applies the GT predicate on the "user_provider_info" field.
func UserProviderInfoGT(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoGTE applies the GTE predicate on the "user_provider_info" field.
func UserProviderInfoGTE(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoLT applies the LT predicate on the "user_provider_info" field.
func UserProviderInfoLT(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoLTE applies the LTE predicate on the "user_provider_info" field.
func UserProviderInfoLTE(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoContains applies the Contains predicate on the "user_provider_info" field.
func UserProviderInfoContains(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoHasPrefix applies the HasPrefix predicate on the "user_provider_info" field.
func UserProviderInfoHasPrefix(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoHasSuffix applies the HasSuffix predicate on the "user_provider_info" field.
func UserProviderInfoHasSuffix(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoEqualFold applies the EqualFold predicate on the "user_provider_info" field.
func UserProviderInfoEqualFold(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserProviderInfo), v))
	})
}

// UserProviderInfoContainsFold applies the ContainsFold predicate on the "user_provider_info" field.
func UserProviderInfoContainsFold(v string) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserProviderInfo), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...int64) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...int64) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...int64) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...int64) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...int64) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...int64) predicate.UserProvider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserProvider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v int64) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserProvider) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserProvider) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserProvider) predicate.UserProvider {
	return predicate.UserProvider(func(s *sql.Selector) {
		p(s.Not())
	})
}
